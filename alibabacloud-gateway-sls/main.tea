import SPI;
import Credential;
import Util;
import OpenApiUtil;
import String;
import Map;
import Array;
import EncodeUtil;
import SignatureUtil;

extends SPI;

init(){
  super();
}

async function modifyConfiguration(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var config = context.configuration;
  config.endpoint = getEndpoint(config.regionId, config.network, config.endpoint);
}

async function modifyRequest(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var request = context.request;
  var hostMap : map[string]string = {};
  if (!Util.isUnset(request.hostMap)) {
    hostMap = request.hostMap;
  }
  var project = hostMap.project;
  var config = context.configuration;
  var credential : Credential = request.credential;
  var accessKeyId = credential.getAccessKeyId();
  var accessKeySecret = credential.getAccessKeySecret();
  var securityToken = credential.getSecurityToken();
  if (!Util.empty(accessKeyId)) {
      request.headers['x-log-signaturemethod'] = 'hmac-sha1';
  }
  if (!Util.empty(securityToken)) {
      request.headers['x-acs-security-token'] = securityToken;
  }
  if (!Util.isUnset(request.body)) {
    if (String.equals(request.reqBodyType, 'protobuf')) {
      // var bodyMap = Util.assertAsMap(request.body);
      // 缺少body的Content-MD5计算，以及protobuf处理
      request.headers['content-type'] = 'application/x-protobuf';
    } else if (String.equals(request.reqBodyType, 'json')) {
      var bodyStr = Util.toJSONString(request.body);
      request.headers['content-md5'] = String.toUpper(EncodeUtil.hexEncode(SignatureUtil.MD5Sign(bodyStr)));
      request.stream = bodyStr;
      request.headers['content-type'] = 'application/json';
    } else if (String.equals(request.reqBodyType, 'formData')) {
      var str = Util.toJSONString(request.body);
      request.headers['content-md5'] = String.toUpper(EncodeUtil.hexEncode(SignatureUtil.MD5Sign(str)));
      request.stream = str;
      request.headers['content-type'] = 'application/json';
    }
  }
  var host = getHost(config.network, project, config.endpoint);
  request.headers = {
    accept = 'application/json',
    host = host,
    date = Util.getDateUTCString(),
    user-agent = request.userAgent,
    x-log-apiversion = '0.6.0',
    x-log-bodyrawsize = '0',
    ...request.headers
  };
  request.headers['authorization'] = getAuthorization(request.pathname, request.method, request.query, request.headers, accessKeyId, accessKeySecret);
}

async function modifyResponse(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var request = context.request;
  var response = context.response;
  if (Util.is4xx(response.statusCode) || Util.is5xx(response.statusCode)) {
    var error = Util.readAsJSON(response.body);
    var resMap = Util.assertAsMap(error);
    throw {
      code = resMap['errorCode'],
      message = resMap['errorMessage'],
      data = {
        httpCode = response.statusCode,
        requestId = response.headers['x-log-requestid'],
      }
    };
  }
  if (!Util.isUnset(response.body)) {
    if (Util.equalString(request.bodyType, 'binary')) {
      response.deserializedBody = response.body;
    } else if (Util.equalString(request.bodyType, 'byte')) {
      var byt = Util.readAsBytes(response.body);
      response.deserializedBody = byt;
    } else if (Util.equalString(request.bodyType, 'string')) {
      response.deserializedBody = Util.readAsString(response.body);
    } else if (Util.equalString(request.bodyType, 'json')) {
      var obj = Util.readAsJSON(response.body);
      // var res = Util.assertAsMap(obj);
      response.deserializedBody = obj;
    } else if (Util.equalString(request.bodyType, 'array')) {
      response.deserializedBody = Util.readAsJSON(response.body);
    } else {
      response.deserializedBody = Util.readAsString(response.body);
    }
  }
}

async function getEndpoint(regionId: string, network: string, endpoint: string) : string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  if (Util.empty(regionId)) {
    regionId = 'cn-hangzhou';
  }
  if (!Util.empty(network)) {
    if (String.equals(network, 'intranet')) {
      return `${regionId}-intranet.log.aliyuncs.com`;
    } else if (String.equals(network, 'accelerate')) {
      return `log-global.aliyuncs.com`;
    } else if (String.equals(network, 'share')) {
      if (String.equals(regionId, 'cn-hangzhou-corp') || String.equals(regionId, 'cn-shanghai-corp')) {
        return `${regionId}.sls.aliyuncs.com`;
      } else if (String.equals(regionId, 'cn-zhangbei-corp')) {
        return `zhangbei-corp-share.log.aliyuncs.com`;
      }
      return `${regionId}-share.log.aliyuncs.com`;
    }
  }
  return `${regionId}.log.aliyuncs.com`;
}

async function getHost(network: string, project: string, endpoint: string): string {
  if (Util.isUnset(project)) {
    return endpoint;
  }
  return `${project}.${endpoint}`;
}

async function getAuthorization(pathname: string, method: string, query: map[string]string, headers: map[string]string, ak: string, secret: string): string {
  var sign = getSignature(pathname, method, query, headers, secret);
  return `LOG ${ak}:${sign}`;
}

async function getSignature(pathname: string, method: string, query: map[string]string, headers: map[string]string, secret: string): string {
  var resource : string = pathname;
  var stringToSign : string = '';
  var canonicalizedResource = buildCanonicalizedResource(resource, query);
  var canonicalizedHeaders = buildCanonicalizedHeaders(headers);
  stringToSign = `${method}\n${canonicalizedHeaders}${canonicalizedResource}`;
  return EncodeUtil.base64EncodeToString(SignatureUtil.HmacSHA1Sign(stringToSign, secret));
}

async function buildCanonicalizedResource(pathname: string, query: map[string]string): string {
  var canonicalizedResource : string = pathname;
  if (!Util.isUnset(query)) {
    var queryList : [string] = Map.keySet(query);
    var sortedParams = Array.ascSort(queryList);
    var separator : string = '?';
    for(var paramName : sortedParams) {
      canonicalizedResource = `${canonicalizedResource}${separator}${paramName}`;
      if (!Util.isUnset(query[paramName])) {
        canonicalizedResource = `${canonicalizedResource}=${query[paramName]}`;
      }
      separator = '&';
    }
  }
  return canonicalizedResource;
}

async function buildCanonicalizedHeaders(headers: map[string]string): string {
  var canonicalizedHeaders : string = '';
  var contentType = headers.content-type;
  if (Util.isUnset(contentType)) {
    contentType = '';
  }
  var contentMd5 = headers.content-md5;
  if (Util.isUnset(contentMd5)) {
    contentMd5 = '';
  }
  canonicalizedHeaders = `${canonicalizedHeaders}${contentMd5}\n${contentType}\n${headers.date}\n`;
  var keys = Map.keySet(headers);
  var sortedHeaders = Array.ascSort(keys);
  for(var header : sortedHeaders) {
    if (String.contains(String.toLower(header), 'x-log-') || String.contains(String.toLower(header), 'x-acs-')) {
      canonicalizedHeaders = `${canonicalizedHeaders}${header}:${headers[header]}\n`;
    }
  }
  return canonicalizedHeaders;
}